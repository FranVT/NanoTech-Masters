# Input Script of lammps for assembly simulation of polimeric network.
# Main code is based on: https://github.com/PipeB62/Hydrogel-Simulation
# Patchy particles are with bond style.

# Felipe Benavides modified by Fco. Vazquez

# Initialization
units lj
dimension 3
boundary p p p

# Styles of atoms and that stuff
atom_style full 
bond_style harmonic
angle_style harmonic
pair_style hybrid/overlay zero 0.0 lj/cut/omp 1.12 table/omp linear 5000000 threebody/table

newton on

# Create simulaiton box
region simulation_box block -$L $L -$L $L -$L $L
# N-atom-types region-ID keyword value Is necesesary the extra/special/per/atom (# of special neighbors per atom)
create_box 4 simulation_box &
    bond/types 1 &
    angle/types 2 &
    extra/bond/per/atom 10 &
    extra/angle/per/atom 6 &
    extra/special/per/atom 10

# Atom types
mass 1 1.0      # CL 
mass 2 1.0      # MO
mass 3 0.1      # PA
mass 4 0.1      # PB

# Coefficients
include potential.in

# Molecules
include molecules.in

# COMPUTES

# Compute global kinetic and potential energy and temperature
compute t all temp
compute p all pressure t
compute ep all pe
compute ek all ke
variable eT equal etotal
variable eB equal ebond
variable eA equal eangle
variable H equal enthalpy
variable eM equal emol
variable ec equal ecouple
variable eC equal econserve

compute press all pressure t ke virial
compute pressVirial all pressure t virial
compute pressVirialMod all pressure t pair bond angle

compute cstress all stress/atom t ke pair bond angle
compute cstressVirial all stress/atom t virial
compute cstressVirialMod all stress/atom t pair bond angle
compute stress all reduce sum c_cstress[*]
compute stressVirial all reduce sum c_cstressVirial[*]
compute stressVirialMod all reduce sum c_cstressVirialMod[*]


compute wcaPair all pair lj/cut/omp epair
compute patchPair all pair table/omp epair
compute swapPair all pair threebody/table epair

# Displacement of the central particles
compute disc CM displace/atom
compute daux CM chunk/atom type pbc yes
compute dis CM reduce/chunk daux sum c_disc[4]

# cluster output
compute clusters all aggregate/atom 0.6

# Get the number of central particles per cluster
compute Nclpart CM chunk/atom c_clusters compress yes discard yes # Get the number of clusters
compute clsize CM property/chunk Nclpart count # Counts the atoms in each chunk


# Compute the distances betwee central particles in the same cluster
compute idcl CM property/chunk Nclpart id # Get the ids of the clusters


#compute 1 CM reduce ave c_

#variable groupCL atom "c_idcl"  
#group CMclusters variable groupCL

compute auxdistCM CM property/local patom1 patom2
compute distCM CM pair/local dist cutoff type # Compute the distance



# DUMPS and FIXES

thermo ${NsaveStress}

# Save global energies and temperature
group Energy empty
fix fixEng Energy ave/time 1 ${Nsave} ${Nsave} c_t c_wcaPair c_patchPair c_swapPair c_ep c_ek v_eT v_ec v_eC c_p v_eB v_eA v_eM v_H file ${Dir}/${file1_name}

# Save Pressure and Stress tensor
group Stress empty
fix fixStress5 Stress ave/time 1 ${NsaveStress} ${NsaveStress} c_p c_press[*] c_pressVirial[*] c_pressVirialMod[*] c_stress[*] c_stressVirial[*] c_stressVirialMod[*] file ${Dir}/${file2_name}

#group CLUST empty
#dump dumpCL all custom ${Ndump} ${Dir}/${file3_name} c_Nclusters c_Nclpart

fix 1 CM ave/time 1 1 ${Ndump} c_idcl c_clsize file ${Dir}/cluster_assembly.fixf mode vector

dump IDdump CM local ${Ndump} ${Dir}/tests_assembly.fixf index c_auxdistCM[1] c_auxdistCM[2] c_distCM[1]


# Save atom positions with cluster id
dump dumpID all custom ${Ndump} ${Dir}/traj/${file4_name} id mol c_clusters type x y z vx vy vz
dump_modify dumpID pbc yes # remap atoms via periodic boundary conditions

# Save Atom displacement
#group Displ empty
#fix fixDispl Displ ave/time 1 ${NsaveStress} ${NsaveStress} c_dis[1] c_dis[2] c_dis[3] c_dis[4] file ${Dir}/cmdisplacement_assembly.fixf

# RUN SIMULATION

# Brownian Dynamics using Langevin Thermostat

timestep ${tstep}

fix VelVerlet all nve # Use Velocity Verlet integrator

# First elevate the temperature
fix ThermoLng all langevin 0.0 ${temp} ${damp} ${seed3} # Brownian Dynamics: langevin + nve 
run ${stepsheat}

unfix ThermoLng

# Now we let the system to create the polymeric network
fix ThermoLng all langevin ${temp} ${temp} ${damp} ${seed3} # Brownian Dynamics: langevin + nve 
run ${steps}

# Write data for deformation

write_data ${Dir}/data.hydrogel
